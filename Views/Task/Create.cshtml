@model WorkloadTest.ViewModels.CreateViewModel
@{
    ViewBag.Title = "Create";
}
<h2>Create</h2>
<form>

    @Html.DisplayTextFor(x=>x.task.Task_ID) <br />
    <input type="checkbox" value="0" id="Routine"/> @Html.DisplayNameFor(x=>x.task.Routine) <br />
    <input type="checkbox" value="0" id="Priority"/> @Html.DisplayNameFor(x=>x.task.Priority) <br />
    @Html.DisplayNameFor(x=>x.task.Description): <input type="text" value="" id="Description" /> <br />
    @Html.DisplayNameFor(x=>x.task.CoE_ID): <select id="CoE_ID">
        @foreach (var coe in Model.allCoEs)
        {
            <option value="@coe.CoE_ID">@coe.CoE</option>
        }
    </select> <br />
    @Html.DisplayNameFor(x=>x.task.Purpose): <input type="text" value="" id="Purpose" /> <br />
    @Html.DisplayNameFor(x=>x.task.Requestor): <input type="text" value="" id="Requestor" /> <br />
    @Html.DisplayNameFor(x=>x.task.Analyst_ID): <select id="Analyst_ID">
        @foreach (var analyst in Model.allAnalysts)
        {
            <option value="@analyst.Analyst_ID">@analyst.First_Name, @analyst.Last_Name</option>
        }
    </select> <br />
    @Html.DisplayNameFor(x=>x.task.Start_Date): <input type="text" value="" id="Start_Date" /> <br />
    @Html.DisplayNameFor(x=>x.task.Request_Date): <input type="text" value="" id="Request_Date" /> <br />
    @Html.DisplayNameFor(x=>x.task.Frequency): <input type="text" value="" id="Frequency" /> <span>    </span>
    @Html.DisplayNameFor(x=>x.task.Count): <input type="text" value="" id="Count" /> <br/>
    @Html.DisplayNameFor(x=>x.task.Period_ID): <select id="Period_ID">
        @foreach (var period in Model.allPeriods)
        {
            <option value="@period.Period_ID">@period.Period_Name</option>
        }
    </select> <br />
    @Html.DisplayNameFor(x=>x.task.Workload): <input type="text" value="" id="Workload" /> <span>  </span>
    @Html.DisplayNameFor(x=>x.task.Workload_Unit_ID): <select id="Workload_Unit_ID">
        @foreach (var workloadUnit in Model.allWorkload_Units)
        {
            <option value="@workloadUnit.Workload_Unit_ID">@workloadUnit.Workload_Unit_Name</option>
        }
    </select> <br />
    @Html.DisplayNameFor(x=>x.task.Comment): <textarea id="Comment" rows="5"></textarea> <br />

    <ol id="instanceList"></ol>

    <button id="createFrontPage" type="button"> Front Page</button>
</form>

<script src='../../Scripts/jquery-1.11.1.min.js'></script>
<script src='../../Scripts/date.format.js'></script>
<script src='../../Scripts/date.js'></script>
<script>

    $(document).ready(function ($) {

        $('#createFrontPage').on('click', function(){
            var allInstances = [];
            $('span[Instance]').each(function(index){
                var instanceID = this.getAttribute("Instance_ID");
                var canceled = document.getElementById('Canceled_' + instanceID).checked;
                if (!canceled){
                    var originalDate = document.getElementById('Original_Task_Date_' + instanceID).textContent;
                    var newDate = document.getElementById('Task_Date_' + instanceID).value ;
                    var due_date;
                    if (newDate != "" && !!newDate){
                        due_date = newDate;
                    }else {
                        due_date =  originalDate;
                    }
                    allInstances.push({
                        Task_ID: @Html.DisplayTextFor(x=>x.task.Task_ID),
                        Routine: document.getElementById('Routine').checked,
                        Priority: document.getElementById('Priority').checked,
                        CoE_ID: document.getElementById('CoE_ID').value,
                        Analyst_ID: document.getElementById('Analyst_ID').value,
                        Description: document.getElementById('Description').value,
                        Purpose: document.getElementById('Purpose').value,
                        Requestor: document.getElementById('Requestor').value,
                        Request_Date: document.getElementById('Request_Date').value,
                        Comment: document.getElementById('Comment').value,
                        Task_Date: due_date,
                    });
                }
            });
            var parameters = [];
            parameters.push({
                allInstances: allInstances,
            });
            $.ajax({
                url: 'createFrontPage',
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                },
                error: function (request) {
                }
            });
        });

        var fields = document.querySelectorAll('select,input,textarea');
        for (var i = 0; i < fields.length; i++) {
            fields[i].addEventListener('change',update,false);
        }

        function update(){
            var parameters = [];
            var startDate =  new Date(parseInt( document.getElementById('Start_Date').value ))
            var requestDate =  new Date(parseInt( document.getElementById('Request_Date').value ))
            parameters.push({
                Task_ID: @Html.DisplayTextFor(x=>x.task.Task_ID),
                Routine: document.getElementById('Routine').checked,
                Priority: document.getElementById('Priority').checked,
                CoE_ID: document.getElementById('CoE_ID').value,
                Analyst_ID: document.getElementById('Analyst_ID').value,
                Description: document.getElementById('Description').value,
                Purpose: document.getElementById('Purpose').value,
                Requestor: document.getElementById('Requestor').value,
                Workload: document.getElementById('Workload').value,
                Workload_Unit_ID: document.getElementById('Workload_Unit_ID').value,
                Comment: document.getElementById('Comment').value,
                Start_Date: startDate,
                Request_Date: requestDate,
                Count: document.getElementById('Count').value,
                Frequency: document.getElementById('Frequency').value,
                Period_ID: document.getElementById('Period_ID').value,
            })
            $.ajax({
                url: this.action,
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                },
                error: function (request) {
                }
            });
        }

        $("#Frequency,#Start_Date,#Period_ID,#Count").on('change keyup paste', function () {
            start_date = document.getElementById('Start_Date').value
            frequency = document.getElementById('Frequency').value;
            period_id = document.getElementById('Period_ID').value
            count = document.getElementById('Count').value
            if (!!start_date && !!frequency && !!period_id && !!count) {
                fetchInstances(0, start_date, frequency, period_id, count);
            }
        });

        $("#Start_Date,#Request_Date").on('change', function () {
            this.value = getDate(this.value.trim(), "mmmm dd, yyyy")
        });

        var list = document.getElementById('instanceList');

        function getDate(date, format) {
            if (date !== ""){
                var parsedDate = Date.parse(date.toString()).toString();
                var realValue = new Date(parsedDate);
                return realValue.format(format);
            }else{
                return null;
            }
        }

        function drop(newDate, instance){
            var parameters = [];
            var exceptionID = document.getElementById('Instance_' + instance).getAttribute("Exception_ID");
            parameters.push({
                Task_ID: @Html.DisplayTextFor(x => x.task.Task_ID),
                Instance_ID: instance,
                Date: newDate,
                Canceled: document.getElementById('Canceled_' + instance).checked || false,
                Comment: document.getElementById("Comment_" + instance).value || "",
            })
            if (exceptionID != 'null'){
                parameters[0].Exception_ID =  exceptionID;
            }
            $.ajax({
                url: 'drop',
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    document.getElementById("Instance_" + instance).setAttribute("Exception_ID",result.Exception_ID);
                },
                error: function (request) {
                    document.getElementById("Instance_" + instance).setAttribute("Exception_ID",result.Exception_ID);
                }
            });
        }


        function fetchInstances(task_id, start_date, frequency, period_id, count) {
            $.getJSON('instances', { Task_ID: @Html.DisplayTextFor(x => x.task.Task_ID), Start_Date: start_date, Frequency: frequency, Period_ID: period_id, Count: count }, function (data) {
                $("#" + list.id).empty();
                for (var i = 0; i < data.length; i++) {
                    var exceptionID = data[i].Exception_ID || null;
                    var entry = document.createElement('li');
                    var date = new Date(parseInt(data[i].Task_Date.substr(6)));
                    if (!!data[i].New_Task_Date){
                        var newDate = new Date(parseInt(data[i].New_Task_Date.substr(6)));
                        newDate = newDate.format("mmmm dd, yyyy")
                    } else {
                        var newDate = null;
                    }

                    var child = document.createElement('span');
                    child.id = "Instance_" + i;
                    child.setAttribute("Instance_ID", i);
                    child.setAttribute("Exception_ID", exceptionID);
                    child.setAttribute("Instance",1);

                    var canceled = document.createElement('input');
                    canceled.type = "checkbox";
                    canceled.checked = data[i].Canceled || false;
                    canceled.id = "Canceled_" + i;
                    canceled.onchange = function () {
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    var comment = document.createElement('input');
                    comment.type = "text";
                    comment.value = data[i].Instance_Comment || "";
                    comment.id = "Comment_" + i;
                    comment.onchange = function () {
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    var task_date = document.createElement('input');
                    task_date.type = "text";
                    task_date.id = "Task_Date_" + i;
                    if (!!newDate){
                        task_date.value = newDate;
                    }
                    task_date.onchange = function () {
                        this.value = getDate(this.value.trim(), "mmmm dd, yyyy");
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    //var childText = document.createTextNode(
                        //date.format("mmmm dd, yyyy")
                    //);
                    var originalDate = document.createElement('label');
                    originalDate.innerHTML = date.format("mmmm dd, yyyy");
                    originalDate.id = "Original_Task_Date_" + i;

                    child.appendChild(originalDate);
                    child.appendChild(task_date);
                    child.appendChild(canceled);
                    child.appendChild(comment);
                    entry.appendChild(child);
                    list.appendChild(entry);
                }
            });
        }
    })
</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>