@model WorkloadTest.ViewModels.TaskListViewModel

@{
    ViewBag.Title = "editTable";
    ViewBag.allCoes = Model.allCoEs;
    ViewBag.allAnalysts = Model.allAnalysts;
}

<div id="dataTable" style="overflow: scroll"></div>

<script type="text/javascript" src="~/Scripts/jquery-1.10.2.js"></script>
<script type="text/javascript" src="../../Scripts/jquery.handsontable.full.js"></script>
<script src="~/Scripts/jquery.simplemodal.1.4.4.min.js"></script>
<link rel="stylesheet" media="screen" href="../../Scripts/jquery.handsontable.full.css" />
<script src='../../Scripts/date.format.js'></script>
<script src='../../Scripts/date.js'></script>


<script type="text/javascript">

    $('document').ready(function($){
        
        //$(".filterButton").on("click",function(){
        $(document).on('click', '.filterButton', function(){
            var filterID = $(this).attr("filterID");
            var field= $(this).attr("field");

            var value = ('' + filterID).toLowerCase(), row, col, r_len, c_len, td;
            var example = $example1
            var datasrch = jQuery.makeArray(values);
            var searcharray = [];
            if (value) {
                for (row = 0, r_len = datasrch.length; row < r_len; row++) {
                    jQuery.each(datasrch[row], function (name, currValue) {
                        if(('' + currValue).toLowerCase().indexOf(value) > -1 && name === field){
                            searcharray.push(datasrch[row]);
                            return false;
                        }
                    });
                }
                example.handsontable('loadData', searcharray);
            }
            else {
                example.handsontable('loadData', values);
            }

        });

        var values = @Html.Raw(Json.Encode(Model.allTasks));

        var maxed = false
            , resizeTimeout
            , availableWidth
            , availableHeight
            , $window = $(window)
            , $example1 = $('#dataTable')

        var calculateSize = function () {
            var offset = $example1.offset();
            availableWidth = $window.width() - offset.left + $window.scrollLeft();
            availableHeight = $window.height() - offset.top + $window.scrollTop();
        };
        $window.on('resize', calculateSize);

        function isEmptyRow(instance, row) {
            var rowData = instance.getData()[row];
            for (var i = 0, ilen = rowData.length; i < ilen; i++) {
                if (rowData[i] !== null) {
                    return false;
                }
            }
            return true;
        }

        function defaultValueRenderer(instance, td, row, col, prop, value, cellProperties) {
            var args = $.extend(true, [], arguments);
            if (args[5] === null && isEmptyRow(instance, row)) {
                args[5] = tpl[col];
                td.style.color = '#999';
                td.style.fontSize = 'larger';
            }
            else {
                td.style.color = '';
            }
            Handsontable.renderers.TextRenderer.apply(this, args);
        }

        
        var tpl = ["(NEW)"];


        maxed = true;
        $example1.handsontable('render');
        $example1.handsontable({
            data: values,
            startRows: 1,
            startCols: 1,
            rowHeaders: false,
            colHeaders: true,
            strechH: 'all',
            strechW: 'all',
            scrollH: 'auto',
            scrollV: 'auto',
            colWidths: [100, 100, 100, 50, 200, 200, 200, 50, 100, 300, 300, 300, 300, 100, 100, 50, 50, 100, 50],
            width: function () {
                if (maxed && availableWidth === void 0) {
                    calculateSize();
                }
                return maxed ? availableWidth : 300;
            },
            height: function () {
                if (maxed && availableHeight === void 0) {
                    calculateSize();
                }
                return maxed ? availableHeight * 0.99 : 300;
            },
            fixedRowsTop: 0,
            fixedColumnsLeft: 1,
            manualColumnResize: true,
            minSpareRows: 1,
            contextMenu: true,
            contextMenu: ['remove_row'],
            colHeaders: [
                "ID",
                '<i class="fa fa-filter"></i>CoE',
                '<i class="fa fa-filter"></i>Analyst',
                "Priority",
                "Description",
                "Purpose",
                "Requestor",
                "Workload",
                "Workload_Unit",
                "Comment",
                "Data_Source",
                "Report_Location",
                "Request_Date",
                "Due_Date",
                "Due Time",
                "Routine",
                "Repeat Every",
                "Period",
                "For:",
            ],
            columns: [
                { data: "Task_ID", readOnly: true, openCell: "true"},
                { data: "CoE", type:'autocomplete', strict: true, 
                    source: function (query, process) {
                        $.ajax({
                            url: 'getCoEs',
                            success: function (response) {
                                process(response);
                            }
                        });
                    }
                },
                { data: "Analyst", type:'autocomplete', strict: true, 
                    source: function (query, process) {
                        $.ajax({
                            url: 'getAnalysts',
                            success: function (response) {
                                process(response);
                            }
                        });
                    }
                },
                { data: "Priority", type:'autocomplete', strict: true, source: function(query, process){ process(["true","false"])} },
                { data: "Description" },
                { data: "Purpose" },
                { data: "Requestor" },
                { data: "Workload" },
                { data: "Workload_Unit", type:'autocomplete', strict: true, 
                    source: function (query, process) {
                        $.ajax({
                            url: 'getWorkload_Units',
                            success: function (response) {
                                console.log("response", response);
                                process(response);
                            }
                        });
                    }
                },
                { data: "Comment"},
                { data: "Data_Source" },
                { data: "Report_Location" },
                { data: "Request_Date" },
                { data: "Start_Date"},
                { data: "Time_Of_Day", type:'autocomplete', strict: true, 
                    source: function (query, process) {
                        $.ajax({
                            url: 'getTimeOfDays',
                            success: function (response) {
                                console.log("response", response);
                                process(response);
                            }
                        });
                    }
                },
                { data: "Routine", type:'autocomplete', strict: true, source: function(query, process){ process(["true","false"])} },
                { data: "Frequency" },
                { data: "Period", type:'autocomplete', strict: true, 
                    source: function (query, process) {
                        $.ajax({
                            url: 'getPeriods',
                            success: function (response) {
                                console.log("response", response);
                                process(response);
                            }
                        });
                    }
                },
                { data: "Count"},
            ],
            afterChange: function (change, source) {
                if (source === 'loadData') {
                    return;
                } else {
                    for (var i = 0; i < change.length; ++i) {
                        $example1.handsontable('updateSettings', {

                            cells: function (row, col, prop) {
                                var cellProperties = {};
                                if (prop === "Period" || prop === "Frequency" || prop === "Count"){
                                    console.log($example1.handsontable('getDataAtRowProp', row, 'Routine'));
                                    if($example1.handsontable('getDataAtRowProp', row, 'Routine') === false){
                                        cellProperties.renderer = greyOut;
                                        return cellProperties;
                                    }
                                } else if (prop === "Task_ID") {
                                    cellProperties.renderer = defaultValueRenderer;
                                    return cellProperties;
                                }
                            }

                        });
                        updateIndicator(change, i);
                    }
                }
            },
            beforeRemoveRow : function(index, amount){
                deleteTask( $example1.handsontable('getDataAtCell',index,0));
            },
            cells: function (row, col, prop) {
                var cellProperties = {};
                if (prop === "Period" || prop === "Frequency" || prop === "Count"){
                    console.log($example1.handsontable('getDataAtRowProp', row, 'Routine'));
                    if($example1.handsontable('getDataAtRowProp', row, 'Routine') === false){
                        cellProperties.renderer = greyOut;
                        return cellProperties;
                    }
                } else if (prop === "Task_ID") {
                    cellProperties.renderer = defaultValueRenderer;
                    return cellProperties;
                }
            },
            beforeChange: function (changes) {
                var instance = $example1.data('handsontable')
                    , i
                    , ilen = changes.length
                    , c
                    , clen = instance.colCount
                    , rowColumnSeen = {}
                    , rowsToFill = {};
                for (i = 0; i < ilen; i++) {
                    if (changes[i][2] === null && changes[i][3] !== null) { //if oldVal is empty
                        if (isEmptyRow(instance, changes[i][0])) {
                            rowColumnSeen[changes[i][0] + '/' + changes[i][1]] = true; //add this row/col combination to cache so it will not be overwritten by template
                            rowsToFill[changes[i][0]] = true;
                        }
                    }
                }
                for (var r in rowsToFill) {
                    if (rowsToFill.hasOwnProperty(r)) {
                        for (c = 0; c < clen; c++) {
                            if (!rowColumnSeen[r + '/' + c]) { //if it is not provided by user in this change set, take value from template
                                changes.push([r, c, null, tpl[c]]);
                            }
                        }
                    }
                }
            }
        });

        function greyOut(instance, td, row, col, prop, value, cellProperties){
            Handsontable.renderers.TextRenderer.apply(this, arguments);
            td.style.background = 'gray';
            td.style.color = 'gray';
        }

        function getDate(date, format) {
            if (date !== ""){
                var parsedDate = Date.parse(date.toString()).toString();
                var realValue = new Date(parsedDate);
                return realValue.format(format);
            }else{
                return null;
            }
        }

        function updateIndicator(change, i){
            var changedRow = change[i][0]
            var changedParameter = change[i][1];
            var changedValue = change[i][3];
            if (changedParameter === "Start_Date" || changedParameter === "Request_Date"){
                if(changedValue != getDate(changedValue.trim(), "yyyy-mm-dd")){
                    changedValue = getDate(changedValue.trim(), "yyyy-mm-dd");
                    $example1.handsontable('setDataAtRowProp',change[i][0],changedParameter, changedValue)
                    return;
                }
            }
            if (changedParameter === "Routine" || changedParameter === "Priority"){
                if(changedValue !== "false" || changedValue !== "true" ){
                    if (changedValue === 'f'){
                        changedValue = "false";
                        $example1.handsontable('setDataAtRowProp',change[i][0],changedParameter, changedValue)
                        return;
                    }
                    if (changedValue === 't'){
                        changedValue = "true";
                        $example1.handsontable('setDataAtRowProp',change[i][0],changedParameter, changedValue)
                        return;
                    }
                }
            }
            if (changedParameter !== "Task_ID"){
                $.get('@Url.Action("/editTable")', {taskID : $example1.handsontable('getDataAtCell',change[i][0],0)}, function (data) {
                    var newValue = data[0];
                    if (newValue == null){
                        var parameters = [];
                        var field = ({});
                        field[changedParameter] = changedValue;
                        field['Task_ID'] = data;
                        parameters.push(field);
                        console.log(parameters)
                        $example1.handsontable('setDataAtRowProp',changedRow, "Task_ID", data);
                        $example1.handsontable('setDataAtRowProp',changedRow, "Routine", "false");
                        $example1.handsontable('setDataAtRowProp',changedRow, "Priority", "false");
                        $example1.handsontable('setDataAtRowProp',changedRow, "Time_Of_Day_ID", "End Of Day");
                    } else {
                        var parameters = []
                        parameters.push({
                            Task_ID: (changedParameter=="Task_ID" ?  parseInt(changedValue) : newValue.Task_ID),
                            Routine: (changedParameter=="Routine" ? changedValue: newValue.Routine),
                            Priority:(changedParameter=="Priority" ? changedValue : newValue.Priority),
                            Description:(changedParameter=="Description" ? changedValue : newValue.Description),
                            Purpose:(changedParameter=="Purpose" ? changedValue : newValue.Purpose),
                            Requestor:(changedParameter=="Requestor" ? changedValue : newValue.Requestor),
                            Workload:(changedParameter=="Workload" ? changedValue : newValue.Workload),
                            Workload_Unit_ID:(changedParameter=="Workload_Unit_ID" ? changedValue : newValue.Workload_Unit_ID),
                            Comment:(changedParameter=="Comment" ? changedValue : newValue.Comment),
                            Data_Source:(changedParameter=="Data_Source" ? changedValue : newValue.Data_Source),
                            Report_Location:(changedParameter=="Report_Location" ? changedValue : newValue.Report_Location),
                            Start_Date:(changedParameter=="Start_Date" ? changedValue : newValue.Start_Date),
                            Time_Of_Day_ID:(changedParameter=="Time_Of_Day_ID" ? changedValue : newValue.Time_Of_Day_ID),
                            Request_Date:(changedParameter=="Request_Date" ? changedValue : newValue.Request_Date),
                            Count:(changedParameter=="Count" ? changedValue : newValue.Count),
                            Frequency:(changedParameter=="Frequency" ? changedValue : newValue.Frequency),
                            Period_ID:(changedParameter=="Period_ID" ? changedValue : newValue.Period_ID),
                            Period:(changedParameter=="Period" ? changedValue : newValue.Period),
                            User_Added:(changedParameter=="User_Added" ? changedValue : newValue.User_Added),
                            Date_Added:(changedParameter=="Date_Added" ? changedValue : newValue.Date_Added),
                            Saved:(changedParameter=="Saved" ? changedValue : newValue.Saved),
                            Analyst:(changedParameter=="Analyst" ? changedValue : newValue.Analyst),
                            CoE:(changedParameter=="CoE" ? changedValue : newValue.CoE),
                            Workload_Unit:(changedParameter=="Workload_Unit" ? changedValue : newValue.Workload_Unit),
                            Time_Of_Day:(changedParameter=="Time_Of_Day" ? changedValue : newValue.Time_Of_Day),
                        })
                    }
                    $.ajax({
                        url: this.action,
                        type: 'POST',
                        data: JSON.stringify(parameters),
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                        },
                        error: function (request){
                        }
                    });
                });
            }
        }

        function addTask(index){
            $.ajax({
                url: 'addTask',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    $example1.handsontable('setDataAtRowProp',index, "Task_ID", result.Task_ID);
                    $example1.handsontable('setDataAtRowProp',index, "Routine", "false");
                    $example1.handsontable('setDataAtRowProp',index, "Priority", "false");
                },
                error: function (request){
                }
            });
        };

        function deleteTask(taskID){
            $.ajax({
                url: 'deleteTask',
                type: 'POST',
                data: JSON.stringify({taskID: taskID}),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                },
                error: function (request){
                }
            });
        };

        $(document).on('click', '.relative', function(e){
            var field = e.target.textContent;
            if (field === "") {
                field = e.target.nextSibling.textContent;
            }
            var htmlContent ="<div class='simplemodal-close' id='filter'>";
            htmlContent += '<label><i class="fa fa-filter"></i><strong> Filter:</strong><label>';
            var ajaxUrl = 'get' + field + 's';
            $.get(ajaxUrl, function(data){
                jQuery.each(data, function (i, value) {
                    htmlContent += "<div class='filterButton' filterID ='" + value + "' field='" + field + "'>" + value + "</div>"
                    //htmlContent += "<div class='filterItem'>" + value + "</div>"
                });
                htmlContent += "<div class='filterButton' filterID ='' field='" + field + "'><em>Clear</em></div>"
                htmlContent += "</div>";
                console.log(htmlContent);
                var posX = e.pageX , posY = e.pageY;
                $(htmlContent).modal({
                    position: [posY,posX],
                    overlayClose:true,
                    opacity:80,
                    overlayCss: {backgroundColor:"#fff"},
                });
            });

        });

        $(document).on('dblclick', '.htDimmed', function(e){
            var id = e.target.textContent;
            window.location.href = "create?id=" + id;
        });
    });
</script>

<style>

  .handsontable table th, .handsontable table td {
       overflow: hidden;
       text-overflow: ellipsis;
       white-space: nowrap;
       height:50px !important;
       min-height:50px !important;
       max-height:50px !important;
  }


    .simplemodal-close {
        background:#0094ff;
    }

    .dialog {
        background-color:red;
        padding:5px;
    }
    .filterButton {
        padding:0 15px 0 15px;
        border-bottom:1px solid;
        color:white;
    }





    .buttonGroup {
        padding-top:5px;
        padding-left:15px;
        padding-bottom:0px;
        border-bottom:1px solid;
    }

    .inner-wrap {
        padding-bottom:10px;
    }

    .handle {
        color:black !important;
        background-color:black !important;
    }


</style>