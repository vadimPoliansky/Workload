@model WorkloadTest.ViewModels.CreateViewModel
@{
    ViewBag.Title = "Create";
    ViewBag.allCoes = Model.allCoEs.OrderBy(x=>x.CoE);
    ViewBag.allAnalysts = Model.allAnalysts.OrderBy(x => x.First_Name);
}

    <br />
   
        <div class="row">
            <div class="small-12 small-centered columns">
                @Html.ActionLink("Done", "New", new { id = Model.task.Task_ID }, new { @class = "button" })
                <button id="createFrontPage" type="button">Front Page</button>
                @Html.ActionLink("Delete", "Delete", new { id = Model.task.Task_ID }, new { @class = "button" })
            </div>
        </div>
        <div class="row collapse">
            <div class="small-6 columns">
                <div class="row">
                    <div class="small-12 columns">
                        <div data-alert class="alert-box">
                            ID: @Html.DisplayTextFor(x => x.task.Task_ID)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <input type="checkbox" @Html.Raw(Model.task.Routine ? "checked" : "") id="Routine"/>
                        @Html.DisplayNameFor(x => x.task.Routine)
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <input type="checkbox"  @Html.Raw(Model.task.Priority ? "checked" : "") id="Priority"/>
                        @Html.DisplayNameFor(x => x.task.Priority)
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Description):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Description)" id="Description" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>
                            @Html.DisplayNameFor(x => x.task.CoE_ID):
            <select id="CoE_ID">
                @foreach (var coe in Model.allCoEs.OrderBy(x=>x.CoE))
                {
                    if (Model.task.CoE_ID == coe.CoE_ID)
                    {
                    <option selected="selected" value="@coe.CoE_ID">@coe.CoE</option>
                    }
                    else
                    {
                    <option value="@coe.CoE_ID">@coe.CoE</option>
                    }
                }
            </select>
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Purpose):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Purpose)" id="Purpose" /></label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Requestor):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Requestor)" id="Requestor" /></label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>
                            @Html.DisplayNameFor(x => x.task.Analyst_ID):
                            <select id="Analyst_ID">
                                @foreach (var analyst in Model.allAnalysts.OrderBy(x => x.First_Name))
                                {
                                    if (Model.task.Analyst_ID == analyst.Analyst_ID)
                                    {
                                    <option selected="selected" value="@analyst.Analyst_ID">@analyst.First_Name, @analyst.Last_Name</option>
                                    }
                                    else
                                    {
                                    <option value="@analyst.Analyst_ID">@analyst.First_Name, @analyst.Last_Name</option>
                                    }
                                }
                            </select>
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Start_Date):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Start_Date)" id="Start_Date" /></label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Request_Date):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Request_Date)" id="Request_Date" /></label>
                    </div>
                </div>
                <div class="row">
                    <div class="small-8 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Workload):
                            <input type="text" value="@Html.DisplayTextFor(x => x.task.Workload)" id="Workload" />
                            <span></span></label>
                    </div>
                    <div class="small-4 columns">
                        <label>
                            @Html.DisplayNameFor(x => x.task.Workload_Unit_ID):
                            <select id="Workload_Unit_ID">
                                @foreach (var workloadUnit in Model.allWorkload_Units.OrderBy(x => x.Sort))
                                {
                                    if (workloadUnit.Workload_Unit_ID == Model.task.Workload_Unit_ID)
                                    {
                                    <option selected="selected" value="@workloadUnit.Workload_Unit_ID">@workloadUnit.Workload_Unit_Name</option>
                                    }
                                    else
                                    {
                                    <option value="@workloadUnit.Workload_Unit_ID">@workloadUnit.Workload_Unit_Name</option>
                                    }
                                }
                            </select>
                        </label>
                    </div>
                </div>

                <div class="row">
                    <div class="small-12 columns">
                        <label>@Html.DisplayNameFor(x => x.task.Comment):
                            <textarea id="Comment" rows="5">@Html.DisplayTextFor(x => x.task.Comment)</textarea></label>
                    </div>
                </div>

                <div class="row">

                    <fieldset>
                        <div class="small-12 columns">
                            <label>@Html.DisplayNameFor(x => x.task.Data_Source):
                                <input type="text" value="@Html.DisplayTextFor(x => x.task.Data_Source)" id="Data_Source" />
                                <input type="file" id="Data_Source_File"></label>
                        </div>
                    </fieldset>
                </div>
                <div class="row">

                    <fieldset>
                        <div class="small-12 columns">
                            <label>@Html.DisplayNameFor(x => x.task.Report_Location):
                                <input type="text" value="@Html.DisplayTextFor(x => x.task.Report_Location)" id="Report_Location" />
                                <input type="file" id="Report_Location_File">
                            </label>
                        </div>
                    </fieldset>
                </div>
                <div class="row">
                    <ol id="pathList">
                        @foreach (var path in Model.allPaths.Where(x => x.Task_ID == Model.task.Task_ID))
                        {
                            <fieldset>
                                <span path_id="@path.Path_ID">
                                    <select path_id="@path.Path_ID" id="Path_Type_ID_@path.Path_ID">
                                        @foreach (var pathType in Model.allPath_Types.OrderBy(x => x.Sort))
                                        {
                                            if (pathType.Path_Type_ID == path.Path_Type_ID)
                                            {
                                            <option selected="selected" value="@pathType.Path_Type_ID">@pathType.Path_Type</option>
                                            }
                                            else
                                            {
                                            <option value="@pathType.Path_Type_ID">@pathType.Path_Type</option>
                                            }
                                        }
                                    </select><input path_id="@path.Path_ID" type="text" value="@path.Title" id="Title_@path.Path_ID"><input type="text" path_id="@path.Path_ID" value="@path.Location" id="Path_@path.Path_ID"><input path_id="@path.Path_ID" type="file" id="File_@path.Path_ID"></span>
                            </fieldset>
                        }
                    </ol>

                </div>
                <div class="row">
                    <button id="addPath" type="button">Add File/Folders</button>
                </div>
            </div>
            <div class="small-6 columns">
                <div routine="1">
                    <div class="row">
                        <fieldset>
                            <div class="row">
                                <legend>Routine</legend>
                                <div class="small-8 columns">
                                    <label>@Html.DisplayNameFor(x => x.task.Frequency):
                                        <input type="text" value="@Html.DisplayTextFor(x => x.task.Frequency)" id="Frequency" />
                                        <span></span></label>
                                </div>
                                <div class="small-4 columns">
                                    <label>@Html.DisplayNameFor(x => x.task.Count):
                                        <input type="text" value="@Html.DisplayTextFor(x => x.task.Count)" id="Count" /></label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="small-12 columns">
                                    <label>
                                        @Html.DisplayNameFor(x => x.task.Period_ID):
                                        <select id="Period_ID">
                                            @foreach (var period in Model.allPeriods.OrderBy(x => x.Sort))
                                            {
                                                if (period.Period_ID == Model.task.Period_ID)
                                                {
                                                <option selected="selected" value="@period.Period_ID">@period.Period_Name</option>
                                                }
                                                else
                                                {
                                                <option value="@period.Period_ID">@period.Period_Name</option>
                                                }
                                            }
                                        </select>
                                    </label>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <div class="row">
                        <ol id="instanceList"></ol>
                    </div>
                </div>
            </div>
        </div>


<script src='../../Scripts/jquery-1.11.1.min.js'></script>
<script src='../../Scripts/date.format.js'></script>
<script src='../../Scripts/date.js'></script>
<script>

    $(document).ready(function ($) {

        var list = document.getElementById('instanceList');
        var pathList = document.getElementById('pathList');
        var routine = document.getElementById('Routine');
        var taskID = @Html.DisplayTextFor(x => x.task.Task_ID);

        $("#Frequency,#Start_Date,#Period_ID,#Count").on('change keyup paste', function () {
            start_date = document.getElementById('Start_Date').value
            frequency = document.getElementById('Frequency').value;
            period_id = document.getElementById('Period_ID').value
            count = document.getElementById('Count').value
            if (!!start_date && !!frequency && !!period_id && !!count) {
                fetchInstances(0, start_date, frequency, period_id, count);
            }
        });

        $("#Start_Date,#Request_Date").each(function(){
            this.value = getDate(this.value.trim(), "mmmm dd, yyyy")
        });

        if(routine.checked){
            $('li[Routine],div[Routine]').each(function(index){
                this.style.display = 'initial';
            });
        }else{
            $('li[Routine],div[Routine]').each(function(index){
                this.style.display = 'none';
                console.log("A");
            });
        }
        $('#Routine').on('click', function(){
            if (this.checked === true){
                $('li[Routine],div[Routine]').each(function(index){
                    this.style.display = 'initial';
                });
            } else {
                $('li[Routine],div[Routine]').each(function(index){
                    this.style.display = 'none';
                });
            }
        });

        $('#addPath').on('click', function() {
            var parameters = [];
            parameters.push({
                Task_ID: taskID,
                Path_Type_ID: @Html.DisplayTextFor(x => x.allPath_Types.LastOrDefault().Path_Type_ID),
            });
            $.ajax({
                url: "@Url.Action("createPath", "Task")",
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    var pathID = result.Path_ID;

                    var fieldset = document.createElement('fieldset');
                    var entry = document.createElement('li');
                    var child = document.createElement('span');
                    child.setAttribute('Path_ID', pathID);

                    var pathTitle = document.createElement('input');
                    pathTitle.placeholder = "Title";
                    pathTitle.type = 'text';
                    pathTitle.id = 'Title_' + pathID;
                    pathTitle.onchange = function () {
                        updatePath(pathID);
                    }
                    var pathText = document.createElement('input');
                    pathText.type = 'text';
                    pathText.id = 'Path_' + pathID;
                    pathText.onchange = function () {
                        updatePath(pathID);
                    }
                    var pathButton= document.createElement('input');
                    pathButton.type = 'file';
                    pathButton.id = 'File_' + pathID;
                    pathButton.onchange = function () {
                        updatePath(pathID);
                    }
                    var pathType = document.createElement('select');
                    pathType.id = 'Path_Type_ID_' + pathID;
                    pathType.onchange = function () {
                        updatePath(pathID);
                    }
                    @foreach(var type in Model.allPath_Types.OrderByDescending(x => x.Sort)){
                        @: var option = document.createElement('option');
                                            @: option.text = '@type.Path_Type';
                                            @: option.value = '@type.Path_Type_ID';
                                            @: pathType.appendChild(option);
                    }
                    child.appendChild(pathType);
                    child.appendChild(pathTitle);
                    child.appendChild(pathText);
                    child.appendChild(pathButton);
                    fieldset.appendChild(child);
                    entry.appendChild(fieldset);
                    pathList.appendChild(entry);
                },
                error: function (request) {
                }
            });
        });
        
        function updatePath(pathID){
            var parameters = [];
            parameters.push({
                Path_ID: pathID,
                Path_Type_ID: document.getElementById('Path_Type_ID_' + pathID).value,
                Title: document.getElementById('Title_' + pathID).value,
                Location: document.getElementById('Path_' + pathID).value + "\\" + document.getElementById('File_' + pathID).value,
                Task_ID: taskID,
            });
            $.ajax({
                url: "@Url.Action("updatePath", "Task")",
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                }
            });
        }

        $('span[path_ID]').each(function(index){
            var pathID = this.getAttribute("path_ID");
            this.onchange = function (){
                updatePath(pathID);
            }
        });

        $('#createFrontPage').on('click', function(){
            var allInstances = [];
            var dataSourcePath = document.getElementById('Data_Source').value ? document.getElementById('Data_Source').value : "";
            dataSourcePath += "\\";
            dataSourcePath += document.getElementById('Data_Source_File').value ? document.getElementById('Data_Source_File').value : "";
            if ($('span[Instance]').length > 0){
                $('span[Instance]').each(function(index){
                    var instanceID = this.getAttribute("Instance_ID");
                    var canceled = document.getElementById('Canceled_' + instanceID).checked;
                    if (!canceled){
                        var originalDate = document.getElementById('Original_Task_Date_' + instanceID).textContent;
                        var newDate = document.getElementById('Task_Date_' + instanceID).value ;
                        var due_date;
                        if (newDate != "" && !!newDate){
                            due_date = newDate;
                        }else {
                            due_date =  originalDate;
                        }
                        allInstances.push({
                            Task_ID: taskID,
                            Routine: document.getElementById('Routine').checked,
                            Priority: document.getElementById('Priority').checked,
                            CoE_ID: document.getElementById('CoE_ID').value,
                            Analyst_ID: document.getElementById('Analyst_ID').value,
                            Description: document.getElementById('Description').value,
                            Purpose: document.getElementById('Purpose').value,
                            Requestor: document.getElementById('Requestor').value,
                            Request_Date: document.getElementById('Request_Date').value,
                            Comment: document.getElementById('Comment').value,
                            Data_Source: dataSourcePath,
                            Task_Date: due_date,
                        });
                    }
                });
            } else {
                allInstances.push({
                    Task_ID: taskID,
                    Routine: document.getElementById('Routine').checked,
                    Priority: document.getElementById('Priority').checked,
                    CoE_ID: document.getElementById('CoE_ID').value,
                    Analyst_ID: document.getElementById('Analyst_ID').value,
                    Description: document.getElementById('Description').value,
                    Purpose: document.getElementById('Purpose').value,
                    Requestor: document.getElementById('Requestor').value,
                    Request_Date: document.getElementById('Request_Date').value,
                    Comment: document.getElementById('Comment').value,
                    Task_Date: document.getElementById('Start_Date').value,
                    Data_Source: dataSourcePath,
                });
            }
            var parameters = [];
            parameters.push({
                allInstances: allInstances,
            });
            $.ajax({
                url: "@Url.Action("createFrontPage", "Task")",
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (retData) {
                    var iframe = document.createElement("iframe");
                    iframe.setAttribute("src", retData.url);
                    iframe.setAttribute("style", "display: none");
                    document.body.appendChild(iframe);
                },
                error: function (request) {
                }
            });
        });

        var fields = document.querySelectorAll('select,input,textarea');
        for (var i = 0; i < fields.length; i++) {
            fields[i].addEventListener('change',update,false);
        }

        function update(){
            var parameters = [];
            var startDate =  document.getElementById('Start_Date').value;
            var requestDate = document.getElementById('Request_Date').value;
            var dataSourcePath = document.getElementById('Data_Source').value ? document.getElementById('Data_Source').value : "";
            dataSourcePath += "\\";
            dataSourcePath += document.getElementById('Data_Source_File').value ? document.getElementById('Data_Source_File').value : "";
            var reportLocationPath = document.getElementById('Report_Location').value ? document.getElementById('Report_Location').value : "";
            reportLocationPath += "\\";
            reportLocationPath += document.getElementById('Report_Location_File').value ? document.getElementById('Report_Location_File').value : "";
            parameters.push({
                Task_ID: taskID,
                Routine: document.getElementById('Routine').checked,
                Priority: document.getElementById('Priority').checked,
                CoE_ID: document.getElementById('CoE_ID').value,
                Analyst_ID: document.getElementById('Analyst_ID').value,
                Description: document.getElementById('Description').value,
                Purpose: document.getElementById('Purpose').value,
                Requestor: document.getElementById('Requestor').value,
                Workload: document.getElementById('Workload').value,
                Workload_Unit_ID: document.getElementById('Workload_Unit_ID').value,
                Comment: document.getElementById('Comment').value,
                Start_Date: startDate,
                Request_Date: requestDate,
                Count: document.getElementById('Count').value,
                Frequency: document.getElementById('Frequency').value,
                Period_ID: document.getElementById('Period_ID').value,
                Data_Source: dataSourcePath,
                Report_Location: reportLocationPath,
            })
            $.ajax({
                url: this.action,
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                },
                error: function (request) {
                }
            });
        }

        start_date = document.getElementById('Start_Date').value
        frequency = document.getElementById('Frequency').value;
        period_id = document.getElementById('Period_ID').value
        count = document.getElementById('Count').value
        if (!!start_date && !!frequency && !!period_id && !!count) {
            fetchInstances(0, start_date, frequency, period_id, count);
        }

        $("#Start_Date,#Request_Date").on('change', function () {
            this.value = getDate(this.value.trim(), "mmmm dd, yyyy")
        });

        function getDate(date, format) {
            if (date !== ""){
                var parsedDate = Date.parse(date.toString()).toString();
                var realValue = new Date(parsedDate);
                return realValue.format(format);
            }else{
                return null;
            }
        }

        function drop(newDate, instance){
            var parameters = [];
            var exceptionID = document.getElementById('Instance_' + instance).getAttribute("Exception_ID");
            parameters.push({
                Task_ID: taskID,
                Instance_ID: instance,
                Date: newDate,
                Canceled: document.getElementById('Canceled_' + instance).checked || false,
                Comment: document.getElementById("Comment_" + instance).value || "",
            })
            if (exceptionID != 'null'){
                parameters[0].Exception_ID =  exceptionID;
            }
            $.ajax({
                url: "@Url.Action("drop", "Task")",
                type: 'POST',
                data: JSON.stringify(parameters),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    document.getElementById("Instance_" + instance).setAttribute("Exception_ID",result.Exception_ID);
                },
                error: function (request) {
                    document.getElementById("Instance_" + instance).setAttribute("Exception_ID",result.Exception_ID);
                }
            });
        }


        function fetchInstances(task_id, start_date, frequency, period_id, count) {
            $.getJSON('instances', { Task_ID: taskID, Start_Date: start_date, Frequency: frequency, Period_ID: period_id, Count: count }, function (data) {
                $("#" + list.id).empty();
                for (var i = 0; i < data.length; i++) {
                    var exceptionID = data[i].Exception_ID || null;
                    var fieldset = document.createElement('fieldset');
                    var entry = document.createElement('li');
                    entry.setAttribute("Routine",1);
                    var date = new Date(parseInt(data[i].Task_Date.substr(6)));
                    if (!!data[i].New_Task_Date){
                        var newDate = new Date(parseInt(data[i].New_Task_Date.substr(6)));
                        newDate = newDate.format("mmmm dd, yyyy")
                    } else {
                        var newDate = null;
                    }

                    var child = document.createElement('span');
                    child.id = "Instance_" + i;
                    child.setAttribute("Instance_ID", i);
                    child.setAttribute("Exception_ID", exceptionID);
                    child.setAttribute("Instance",1);


                    var canceled = document.createElement('input');
                    canceled.type = "checkbox";
                    canceled.checked = data[i].Canceled || false;
                    canceled.id = "Canceled_" + i;
                    canceled.onchange = function () {
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    var comment = document.createElement('input');
                    comment.type = "text";
                    comment.value = data[i].Instance_Comment || "";
                    comment.id = "Comment_" + i;
                    comment.text
                    comment.placeholder = "Comment";
                    comment.onchange = function () {
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    var canceledLabel = document.createElement('label');
                    canceledLabel.innerHTML = "Cancel";
                    canceledLabel.setAttribute("for", "Canceled_" + i);

                    var task_date = document.createElement('input');
                    task_date.type = "text";
                    task_date.id = "Task_Date_" + i;
                    task_date.placeholder = "Rescheduale";
                    if (!!newDate){
                        task_date.value = newDate;
                    }
                    task_date.onchange = function () {
                        this.value = getDate(this.value.trim(), "mmmm dd, yyyy");
                        instance = this.parentNode.getAttribute("Instance_ID");
                        date = document.getElementById("Task_Date_" + instance).value;
                        drop(date, instance);
                    }

                    //var childText = document.createTextNode(
                    //date.format("mmmm dd, yyyy")
                    //);
                    var originalDate = document.createElement('span');
                    originalDate.className ='label';
                    originalDate.innerHTML = date.format("mmmm dd, yyyy");
                    originalDate.id = "Original_Task_Date_" + i;

                    child.appendChild(originalDate);
                    child.appendChild(task_date);
                    child.appendChild(canceled);
                    child.appendChild(canceledLabel);
                    child.appendChild(comment);
                    fieldset.appendChild(child);
                    entry.appendChild(fieldset);
                    list.appendChild(entry);
                }
            });
        }
    })
</script>
